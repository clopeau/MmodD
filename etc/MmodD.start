// Copyright (C) 2010 - Thierry Clopeau
// Copyright (C) 2010 - Delanoue David
// Copyright (C) 2010 - Marcel Ndeffo
// Copyright (C) 2010 - Sofian Smatti
// 
// This file must be used under the term of the CeCILL
// http://www.cecill.info 


mprintf("Start MmodD\t Type MmodD for the GUI\n");

if isdef("toolbox_mmodd") then
	warning("Toolbox MmodD is already loaded");
	return;
end

etc_tlbx  = get_absolute_file_path("MmodD.start");
etc_tlbx  = getshortpathname(etc_tlbx);
root_tlbx = strncpy( etc_tlbx, length(etc_tlbx)-length("\etc\") );

// define mmodd_path
//==========================================
global %mmodd_path;
%mmodd_path=root_tlbx;

//Load  functions library
// =============================================================================
mprintf("\tLoad macros\n");
macrospath = pathconvert( root_tlbx ) + "macros" + filesep();

listfic=listfiles(macrospath);
%dir=[];
for %ii=1:size(listfic,1)
  rep=listfic(%ii,1);
  if(isdir(macrospath+rep))
    %dir($+1)=rep;
  end
end

num=size(%dir,1);
for %ii=1:num
    str=macrospath+%dir(%ii,1);
    execstr('mmodd_'+%dir(%ii,1)+'_lib='+'lib('''+ str+'/'' )');
//    write(%io(2),'          - macros  '+%dir(%ii,1)+' loaded');
end


// load gateways
// =============================================================================
mprintf("\tLoad gateways\n");
ilib_verbose(0);
exec(pathconvert(root_tlbx+"/src/loader_src.sce",%f));
exec(pathconvert(root_tlbx+"/sci_gateway/loader_gateway.sce",%f));

// Load and add help chapter
// =============================================================================
if or(getscilabmode() == ["NW";"STD"]) then
	mprintf("\tLoad help\n");
	path_addchapter = pathconvert(root_tlbx+"/jar");
	if ( isdir(path_addchapter) <> [] ) then
		add_help_chapter("MmodD", path_addchapter, %F);
		clear add_help_chapter;
	end
	clear path_addchapter;
end


// Load demos
// =============================================================================
if or(getscilabmode() == ["NW";"STD"]) then
    mprintf("\tLoad demos\n");
    pathdemos = pathconvert(root_tlbx+"/demos/MmodD.dem.gateway.sce",%F,%T);
    add_demo("MmodD",pathdemos);
    clear pathdemos add_demo;
end

// definition of global var %exclud (using in function name)
// =============================================================================

if ~isdef("%exclud")
    global %exclud;
    %exclud=who('get');
    %exclud=%exclud(length(%exclud)>2);
    %exclud(grep(%exclud,'%'))=[];
    //%exclud=[%exclud;'%'];
end

// choice of OS and definition
// of global var %execpath and other external path applications
// =============================================================================

global %execpath; //obsolete
global %paraview_path;
%paraview_path=[];
OS=getos();
if OS=="Windows"  
  %execpath=root_tlbx+"\Win32\";
  //--- search paraview
  for Disk=['C','D','E','F','G','H','I','J'] //to much...
    AllDirs=ls(Disk+":\Program Files*")
    Dirs=[];
    for i=1:size(AllDirs,1)
      Dirs=[Dirs ; ls (AllDirs(i))];
    end
    if grep(Dirs,'ParaView')<>[]
      %paraview_path=Disk+":\Program Files\"+Dirs(grep(Dirs,'ParaView'))+'\';
      %paraview_path=%paraview_path+'\bin';
    end
  end
elseif OS=="Linux"
  %execpath=root_tlbx+"/Linux64/";
  //--- search paraview
  [rep,stat]=unix_g("echo $PATH");
  ppt=[0, strindex(rep,':'), length(rep)+1];
  for %ii=1:length(ppt)-1;
    if grep(ls(part(rep,ppt(%ii)+1:ppt(%ii+1)-1)),'paraview')<>[];
      %paraview_path=part(rep,ppt(%ii)+1:ppt(%ii+1)-1);
    end
  end
else 
  %execpath=root_tlbx+"/MacIntel32/";
  //--- search paraview
  Directory=ls('/Applications');
  TMP=grep(Directory,'ParaView');
  if TMP<>[]
    %paraview_path="/Applications/"+strsubst(Directory(TMP($)),' ','\ ')+"/Contents/MacOS/";
  elseif grep(Directory,'paraview.app')<>[]
    %paraview_path="/Applications/paraview.app/Contents/MacOS/";
  end
end

clear TMP;
clear Directory;

//clear root_tlbx;
//clear etc_tlbx;



